// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handlers

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockIKafkaProducer creates a new instance of MockIKafkaProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIKafkaProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIKafkaProducer {
	mock := &MockIKafkaProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIKafkaProducer is an autogenerated mock type for the IKafkaProducer type
type MockIKafkaProducer struct {
	mock.Mock
}

type MockIKafkaProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIKafkaProducer) EXPECT() *MockIKafkaProducer_Expecter {
	return &MockIKafkaProducer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockIKafkaProducer
func (_mock *MockIKafkaProducer) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIKafkaProducer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockIKafkaProducer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockIKafkaProducer_Expecter) Close() *MockIKafkaProducer_Close_Call {
	return &MockIKafkaProducer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockIKafkaProducer_Close_Call) Run(run func()) *MockIKafkaProducer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIKafkaProducer_Close_Call) Return(err error) *MockIKafkaProducer_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIKafkaProducer_Close_Call) RunAndReturn(run func() error) *MockIKafkaProducer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function for the type MockIKafkaProducer
func (_mock *MockIKafkaProducer) SendMessage(key string, message string) error {
	ret := _mock.Called(key, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(key, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIKafkaProducer_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockIKafkaProducer_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - key
//   - message
func (_e *MockIKafkaProducer_Expecter) SendMessage(key interface{}, message interface{}) *MockIKafkaProducer_SendMessage_Call {
	return &MockIKafkaProducer_SendMessage_Call{Call: _e.mock.On("SendMessage", key, message)}
}

func (_c *MockIKafkaProducer_SendMessage_Call) Run(run func(key string, message string)) *MockIKafkaProducer_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockIKafkaProducer_SendMessage_Call) Return(err error) *MockIKafkaProducer_SendMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIKafkaProducer_SendMessage_Call) RunAndReturn(run func(key string, message string) error) *MockIKafkaProducer_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}
