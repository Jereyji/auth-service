// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handlers

import (
	"context"

	"github.com/Jereyji/auth-service/internal/auth/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIAuthService creates a new instance of MockIAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthService {
	mock := &MockIAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIAuthService is an autogenerated mock type for the IAuthService type
type MockIAuthService struct {
	mock.Mock
}

type MockIAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthService) EXPECT() *MockIAuthService_Expecter {
	return &MockIAuthService_Expecter{mock: &_m.Mock}
}

// DummyLogin provides a mock function for the type MockIAuthService
func (_mock *MockIAuthService) DummyLogin(ctx context.Context, name string, email string, password string) (entity.AccessToken, entity.RefreshToken, error) {
	ret := _mock.Called(ctx, name, email, password)

	if len(ret) == 0 {
		panic("no return value specified for DummyLogin")
	}

	var r0 entity.AccessToken
	var r1 entity.RefreshToken
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (entity.AccessToken, entity.RefreshToken, error)); ok {
		return returnFunc(ctx, name, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) entity.AccessToken); ok {
		r0 = returnFunc(ctx, name, email, password)
	} else {
		r0 = ret.Get(0).(entity.AccessToken)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) entity.RefreshToken); ok {
		r1 = returnFunc(ctx, name, email, password)
	} else {
		r1 = ret.Get(1).(entity.RefreshToken)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = returnFunc(ctx, name, email, password)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIAuthService_DummyLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DummyLogin'
type MockIAuthService_DummyLogin_Call struct {
	*mock.Call
}

// DummyLogin is a helper method to define mock.On call
//   - ctx
//   - name
//   - email
//   - password
func (_e *MockIAuthService_Expecter) DummyLogin(ctx interface{}, name interface{}, email interface{}, password interface{}) *MockIAuthService_DummyLogin_Call {
	return &MockIAuthService_DummyLogin_Call{Call: _e.mock.On("DummyLogin", ctx, name, email, password)}
}

func (_c *MockIAuthService_DummyLogin_Call) Run(run func(ctx context.Context, name string, email string, password string)) *MockIAuthService_DummyLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockIAuthService_DummyLogin_Call) Return(accessToken entity.AccessToken, refreshToken entity.RefreshToken, err error) *MockIAuthService_DummyLogin_Call {
	_c.Call.Return(accessToken, refreshToken, err)
	return _c
}

func (_c *MockIAuthService_DummyLogin_Call) RunAndReturn(run func(ctx context.Context, name string, email string, password string) (entity.AccessToken, entity.RefreshToken, error)) *MockIAuthService_DummyLogin_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockIAuthService
func (_mock *MockIAuthService) Login(ctx context.Context, email string, password string) (entity.AccessToken, entity.RefreshToken, error) {
	ret := _mock.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 entity.AccessToken
	var r1 entity.RefreshToken
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (entity.AccessToken, entity.RefreshToken, error)); ok {
		return returnFunc(ctx, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) entity.AccessToken); ok {
		r0 = returnFunc(ctx, email, password)
	} else {
		r0 = ret.Get(0).(entity.AccessToken)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) entity.RefreshToken); ok {
		r1 = returnFunc(ctx, email, password)
	} else {
		r1 = ret.Get(1).(entity.RefreshToken)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = returnFunc(ctx, email, password)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIAuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockIAuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx
//   - email
//   - password
func (_e *MockIAuthService_Expecter) Login(ctx interface{}, email interface{}, password interface{}) *MockIAuthService_Login_Call {
	return &MockIAuthService_Login_Call{Call: _e.mock.On("Login", ctx, email, password)}
}

func (_c *MockIAuthService_Login_Call) Run(run func(ctx context.Context, email string, password string)) *MockIAuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIAuthService_Login_Call) Return(accessToken entity.AccessToken, refreshToken entity.RefreshToken, err error) *MockIAuthService_Login_Call {
	_c.Call.Return(accessToken, refreshToken, err)
	return _c
}

func (_c *MockIAuthService_Login_Call) RunAndReturn(run func(ctx context.Context, email string, password string) (entity.AccessToken, entity.RefreshToken, error)) *MockIAuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function for the type MockIAuthService
func (_mock *MockIAuthService) Logout(ctx context.Context, refreshToken string) error {
	ret := _mock.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIAuthService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockIAuthService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx
//   - refreshToken
func (_e *MockIAuthService_Expecter) Logout(ctx interface{}, refreshToken interface{}) *MockIAuthService_Logout_Call {
	return &MockIAuthService_Logout_Call{Call: _e.mock.On("Logout", ctx, refreshToken)}
}

func (_c *MockIAuthService_Logout_Call) Run(run func(ctx context.Context, refreshToken string)) *MockIAuthService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIAuthService_Logout_Call) Return(err error) *MockIAuthService_Logout_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIAuthService_Logout_Call) RunAndReturn(run func(ctx context.Context, refreshToken string) error) *MockIAuthService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshTokens provides a mock function for the type MockIAuthService
func (_mock *MockIAuthService) RefreshTokens(ctx context.Context, refreshToken string) (entity.AccessToken, entity.RefreshToken, error) {
	ret := _mock.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshTokens")
	}

	var r0 entity.AccessToken
	var r1 entity.RefreshToken
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (entity.AccessToken, entity.RefreshToken, error)); ok {
		return returnFunc(ctx, refreshToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) entity.AccessToken); ok {
		r0 = returnFunc(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(entity.AccessToken)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) entity.RefreshToken); ok {
		r1 = returnFunc(ctx, refreshToken)
	} else {
		r1 = ret.Get(1).(entity.RefreshToken)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, refreshToken)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIAuthService_RefreshTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshTokens'
type MockIAuthService_RefreshTokens_Call struct {
	*mock.Call
}

// RefreshTokens is a helper method to define mock.On call
//   - ctx
//   - refreshToken
func (_e *MockIAuthService_Expecter) RefreshTokens(ctx interface{}, refreshToken interface{}) *MockIAuthService_RefreshTokens_Call {
	return &MockIAuthService_RefreshTokens_Call{Call: _e.mock.On("RefreshTokens", ctx, refreshToken)}
}

func (_c *MockIAuthService_RefreshTokens_Call) Run(run func(ctx context.Context, refreshToken string)) *MockIAuthService_RefreshTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIAuthService_RefreshTokens_Call) Return(accessToken entity.AccessToken, refreshToken1 entity.RefreshToken, err error) *MockIAuthService_RefreshTokens_Call {
	_c.Call.Return(accessToken, refreshToken1, err)
	return _c
}

func (_c *MockIAuthService_RefreshTokens_Call) RunAndReturn(run func(ctx context.Context, refreshToken string) (entity.AccessToken, entity.RefreshToken, error)) *MockIAuthService_RefreshTokens_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockIAuthService
func (_mock *MockIAuthService) Register(ctx context.Context, name string, email string, password string) error {
	ret := _mock.Called(ctx, name, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, name, email, password)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIAuthService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockIAuthService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx
//   - name
//   - email
//   - password
func (_e *MockIAuthService_Expecter) Register(ctx interface{}, name interface{}, email interface{}, password interface{}) *MockIAuthService_Register_Call {
	return &MockIAuthService_Register_Call{Call: _e.mock.On("Register", ctx, name, email, password)}
}

func (_c *MockIAuthService_Register_Call) Run(run func(ctx context.Context, name string, email string, password string)) *MockIAuthService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockIAuthService_Register_Call) Return(err error) *MockIAuthService_Register_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIAuthService_Register_Call) RunAndReturn(run func(ctx context.Context, name string, email string, password string) error) *MockIAuthService_Register_Call {
	_c.Call.Return(run)
	return _c
}
